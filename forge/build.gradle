plugins {
	id 'dev.architectury.loom' version '0.11.0-SNAPSHOT'
	id 'maven-publish'
}
evaluationDependsOn(":sgui")

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

def props = project(":sgui")
archivesBaseName = rootProject.archives_base_name + "-" + project.name + "-" + props.minecraft_version
version = props.mod_version
group = rootProject.maven_group

loom {
	silentMojangMappingsLicense()

	forge {
		mixinConfigs = [
				"sgui.mixins.json"
		]
	}

	launches {
		data {
			arg "--existing", file("src/main/resources").absolutePath
		}
	}
}

dependencies {
	// to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${props.minecraft_version}"
	mappings "net.fabricmc:yarn:${props.yarn_mappings}:v2"
	// your forge dependency, this is **required** when using Forge Loom in forge mode!
	forge "net.minecraftforge:forge:${props.minecraft_version}-${rootProject.forge_version}"


	compileOnly project(":sgui")
	testCompileOnly("org.jetbrains:annotations:23.0.0")
}

tasks.withType(JavaCompile) {
	source(project(":sgui").sourceSets.main.allSource)
}

processResources {
	// define properties that can be used during resource processing
	inputs.property "version", project.version

	filesMatching("META-INF/mods.toml") {
		expand "version": project.version
	}

	inputs.property "refmap", "sgui-${project.name}-${props.minecraft_version}-${project.name}-refmap.json"

	filesMatching("sgui.mixins.json") {
		expand "refmap": "sgui-${project.name}-${props.minecraft_version}-${project.name}-refmap.json"
	}

	exclude("fabric.mod.json")


	from project(":sgui").sourceSets.main.resources
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"

	def javaTarget = 17;
	options.release = javaTarget

	sourceCompatibility = JavaVersion.toVersion(javaTarget)
	targetCompatibility = JavaVersion.toVersion(javaTarget)
	if (JavaVersion.current() < JavaVersion.toVersion(javaTarget)) {
		toolchain.languageVersion.set(JavaLanguageVersion.of(javaTarget))
	}
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}" }
	}
	manifest {
		attributes([
				"Specification-Title"     : rootProject.archives_base_name,
				"Specification-Vendor"    : "",
				"Specification-Version"   : props.mod_version,
				"Implementation-Title"    : project.name,
				"Implementation-Version"  : project.jar.archiveVersion,
				"Implementation-Vendor"   : "",
				"MixinConfigs"            : "${rootProject.archives_base_name}.mixins.json",
				"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}
